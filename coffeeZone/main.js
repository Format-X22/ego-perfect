// Generated by CoffeeScript 1.10.0
(function() {
  var Main, Router, bodyParser, cookieParser, express, favicon, fileParser, http, path;

  express = require('express');

  favicon = require('serve-favicon');

  path = require('path');

  bodyParser = require('body-parser');

  cookieParser = require('cookie-parser');

  fileParser = require('connect-busboy');

  http = require('http');

  Router = require('./router');

  Main = (function() {
    var app, fileSizeLimitsConfig, rerunTime, server;

    app = express();

    server = null;

    rerunTime = 10 * 1000;

    fileSizeLimitsConfig = {
      limits: {
        fileSize: 10 * 1024 * 1024
      }
    };

    function Main() {
      this.initDataBaseStep();
      this.initExpressStep();
      this.initRouter();
      this.createServerStep();
    }

    Main.prototype.initDataBaseStep = function() {
      return console.log('Инициализация Mongo.');
    };

    Main.prototype.initExpressStep = function() {
      var faviconPath, staticDirSign;
      console.log('Инициализация Express.');
      app.set('view engine', 'jade');
      app.set('views', __dirname + "/view");
      faviconPath = path.join(__dirname + "/public/static/img/favicon.png");
      app.use(favicon(faviconPath));
      app.use(bodyParser.json());
      app.use(bodyParser.urlencoded({
        extended: false
      }));
      app.use(cookieParser());
      app.use(fileParser(fileSizeLimitsConfig));
      staticDirSign = express["static"](__dirname + "/public");
      return app.use(staticDirSign);
    };

    Main.prototype.initRouter = function() {
      return new Router(app);
    };

    Main.prototype.createServerStep = function() {
      server = http.createServer(app);
      server.on('error', this.handleServerError.bind(this));
      return server.listen(this.normalizePort(), this.onServerStart.bind(this));
    };

    Main.prototype.normalizePort = function() {
      var port, value;
      value = process.env.PORT || 3000;
      port = parseInt(value, 10);
      if (isNaN(port)) {
        return value;
      }
      if (port >= 0) {
        return port;
      }
      return false;
    };

    Main.prototype.handleServerError = function(error) {
      console.log("Ошибка сервера!\n\n" + error);
      console.log('Попытка перезапуска сервера...');
      return this.tryRunServerLate();
    };

    Main.prototype.onServerStart = function(error) {
      if (error) {
        console.log(error);
        return this.tryRunServerLate();
      } else {
        return console.log('Сервер успешно запущен.');
      }
    };

    Main.prototype.tryRunServerLate = function() {
      server.close();
      return setTimeout((function(_this) {
        return function() {
          return _this.createServer();
        };
      })(this), rerunTime);
    };

    return Main;

  })();

  new Main();

}).call(this);

//# sourceMappingURL=main.js.map
