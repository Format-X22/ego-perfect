// Generated by CoffeeScript 1.10.0
(function() {
  var SearchMachine, fieldsToReturn, mongo, normalize, query, removeDuplicatesAndEmpty, removeEnds, removeTags, search, split, utils;

  mongo = require('../mongo');

  utils = require('../utils');

  fieldsToReturn = {
    _id: 1,
    tags: 1,
    rating: 1,
    company: 1
  };

  search = function(raw, start, next) {
    var tokens, value;
    value = normalize(raw);
    value = removeTags(value);
    value = split(value);
    value = removeEnds(value);
    tokens = removeDuplicatesAndEmpty(value);
    return query(tokens, start, next);
  };

  normalize = function(value) {
    value = value || '';
    if (value(instaceof(Array))) {
      value = value.join(' ');
    }
    return value;
  };

  removeTags = function(value) {
    return utils.removeTags(value);
  };

  split = function(value) {
    return value.toLowerCase().replace(/&nbsp;|\u200B|\n|\r/g, ' ').replace(/\.|,|\?|!|;|"|«|»|'|\(|\)|_/g, ' ').replace(/+/g, ' ').replace(/-/g, '-').replace(/-|-/g, '-').replace(/\/\/|\\/g, ' ').replace(/+/g, ' ').replace(/./g, ' ').replace(/../g, ' ').replace(/^.|.$/g, '').replace(/^..|..$/g, '').replace(/ё/g, 'е').split(' ');
  };

  removeEnds = function(value) {
    return value.map(function(token) {
      token = token.trim();
      if (token.length < 6) {
        return token.slice(0, -1);
      }
      if (token.length < 8) {
        return token.slice(0, -2);
      }
      return token.slice(0, -3);
    });
  };

  removeDuplicatesAndEmpty = function(value) {
    var result;
    result = [];
    value.each(function(token) {
      if (token && (result.indexOf(token) !== -1)) {
        return result.push(token);
      }
    });
    return result;
  };

  query = function(tokens, start, next) {
    var cursor;
    cursor = findCursor();
    if (this.isEmptyTokens()) {
      return cursor.sort({
        rating: -1
      }).toArray(sendResult);
    } else {
      return cursor.skip(start).limit(model.get('limit')).toArray(sendResult);
    }
  };

  SearchMachine = (function() {
    SearchMachine.prototype.tokens = null;

    function SearchMachine() {
      this.makeQueryTokens();
    }

    SearchMachine.prototype.tkns = function() {};

    SearchMachine.prototype.makeQueryTokens = function() {
      return this.tkns(query).then((function(_this) {
        return function(tokenss) {
          var tokens;
          tokens = tokenss;
          return _this.doDBQuery();
        };
      })(this));
    };

    SearchMachine.prototype.doDBQuery = function() {};

    SearchMachine.prototype.findCursor = function() {
      var collection, dbQuery, fields;
      dbQuery = this.makeDBQuery();
      collection = mongo.collection('search');
      fields = this.getFieldsToReturn();
      return collection.find(dbQuery, fields);
    };

    SearchMachine.prototype.sendResult = function(error, data) {
      var limit, start;
      start = model.get('start');
      limit = model.get('limit');
      if (error) {
        this.sendSearchError();
        return;
      }
      if (!this.isEmptyTokens()) {
        data = data.splice(start, limit);
      }
      return this.sortAndSend(data);
    };

    SearchMachine.prototype.sortAndSend = function(data) {
      var needSort;
      needSort = !this.isEmptyTokens();
      if (needSort) {
        data = this.sortResult(data);
      }
      data = data.map(function(item) {
        return {
          id: item._id,
          company: item.company
        };
      });
      return this.getProtocol().sendData(data);
    };

    SearchMachine.prototype.isEmptyTokens = function() {
      return this.getTokens()[0] === '';
    };

    SearchMachine.prototype.sortResult = function(data) {
      return data.sort((function(_this) {
        return function(itemA, itemB) {
          _this.applyTokenEqualsCount(itemA, itemB);
          return _this.compareResultItems(itemA, itemB);
        };
      })(this));
    };

    SearchMachine.prototype.compareResultItems = function(itemA, itemB) {
      var aCount, aRating, bCount, bRating;
      aCount = itemA.equalsCount;
      bCount = itemB.equalsCount;
      aRating = itemA.rating;
      bRating = itemB.rating;
      if (aCount < bCount) {
        return 1;
      }
      if (aCount > bCount) {
        return -1;
      }
      if (aRating < bRating) {
        return 1;
      }
      if (aRating > bRating) {
        return -1;
      }
      return 0;
    };

    SearchMachine.prototype.applyTokenEqualsCount = function(itemA, itemB) {
      if (!itemA.equalsCount) {
        this.setTokenEqualsCount(itemA);
      }
      if (!itemB.equalsCount) {
        return this.setTokenEqualsCount(itemB);
      }
    };

    SearchMachine.prototype.setTokenEqualsCount = function(item) {
      item.equalsCount = 0;
      return tokens.forEach(function(token) {
        if (Ext.Array.contains(item.tags, token)) {
          return item.equalsCount++;
        }
      });
    };

    SearchMachine.prototype.makeDBQuery = function() {
      if (this.isEmptyTokens()) {
        return {};
      }
      return {
        tags: {
          $in: this.getTokens()
        }
      };
    };

    return SearchMachine;

  })();

  exports.search = search;

}).call(this);

//# sourceMappingURL=search.js.map
